// --------------------------------------------------------------------------------------------------------------------
// <copyright>
//   Copyright (c) Microsoft. All rights reserved.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace JsonRPCServer
{
    using System;
    using Microsoft.AspNetCore.Hosting;
    using System.Threading.Tasks;
    using Microsoft.Perks.JsonRpc;
    
     public class Thing{ 
        public string Name{ get;set;}
        public string Address{ get;set;}
     }

    // this is an example of the client for a json-rpc service
    // (would be autogenerated)
    public class PluginClient {
        private Connection _connection;
        public PluginClient( Connection connection) {
            _connection = connection;
        }

        // this a notification (one-way, no result)
        public Task InitializePlugin() =>
            _connection.Notify("/plugin/initialize");

        public Task<bool> GetBool() =>
            _connection.Request<bool>("/plugin/GetBool");
        
        /*
        public Task<bool> FlipBool(bool b) =>
            _connection.RequestWithValues<bool>("/plugin/flipBool",b);
        */
        public Task<Thing> GetThing() => 
            _connection.Request<Thing>("/plugin/getThing");

        public Task<bool> SendThing(Thing something) =>
            _connection.Request<bool>("/plugin/sendThing",something );
    }

    public static class Program
    {
         public static int Main(string[] args) {
            return MainAsync(args).Result;
         }

        public static async Task<int> MainAsync(string[] args)
        {
            Log.Color = ConsoleColor.Green;
            Log.Name = "HOST";

            // Environment.CurrentDirectory = @"C:\work\github\Rpc\Host\bin\Debug\net461";
            // create the host and server 
            var rpcServer = new Server();

            // start up the host.
            var host = new WebHostBuilder()
                .UseServer(rpcServer)
                .UseStartup<Startup>()
                .Build();

            host.Start();

            // wait for the message server to be ready to actually process messages
            rpcServer.Wait();

            Console.WriteLine("Application started. Press Ctrl+C to shut down.");
            
            // Create a child process for the client
            // Server communicates with this client using json rpc via the process stdin/out
            System.Diagnostics.Process p = new System.Diagnostics.Process();
            p.StartInfo.FileName = @"dotnet";
            p.StartInfo.Arguments = @"C:\work\github\Rpc\Plugin\bin\Debug\netcoreapp1.0\Plugin.dll";
            // p.StartInfo.FileName = @"C:\work\github\Rpc\Plugin\bin\Debug\net461\Plugin.exe";
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardInput = true;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;
            p.EnableRaisingEvents = true;
            p.Start();
           
            var connection = new Connection(p.StandardInput, p.StandardOutput, p.Kill );
            rpcServer.Subscribe(connection);

            p.ErrorDataReceived += (sender,data) => {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Error.WriteLine($"[from plugin] {data.Data}");
                Console.ForegroundColor = ConsoleColor.White;
            };

            // p.StandardInput.AutoFlush = true;
            p.BeginErrorReadLine();
            p.Exited += connection.DisposeOn;
            
            var plugin = new PluginClient(connection);
            
            // call notification - this doesn't wait for the call to finish, just the sending of the notification.
            await plugin.InitializePlugin();

            var b = plugin.GetBool();
            
            await b;
            Log.WriteLine("Done GetBool");
            
            var thing = plugin.GetThing();

            var done = plugin.SendThing( await thing ) ;
            
            await done;
            Log.WriteLine("Done Done");
            
            // var f =  plugin.FlipBool(true);
            // await f;
            Log.WriteLine("Done f");

            Log.WriteLine("Done on this end.waiting....");
            Console.ReadLine();
            // kill the client 
            connection.Dispose();
            
            // kill our server
            rpcServer.Dispose();

            // var t3 = myServer.TalkToClient(p.StandardInput);
            // var t2 = myServer.ShutDownClient(p.StandardInput);
            // Task.WaitAll(t1, t2, t3);

            // Console.WriteLine("All tasks have finished");
            // Console.ReadKey();
            return 0;
        }
    }
}
